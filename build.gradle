buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
    }
}

allprojects {
	group = 'org.rocket'
    version = '1.1-SNAPSHOT'
}

subprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url acaraUrl
            credentials {
                username acaraUsername
                password acaraPassword
            }
        }
    }

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile 'org.fungsi:fungsi-core:1.2.+'
        compile 'org.slf4j:slf4j-api:1.7.7'
        compile 'com.google.guava:guava:17.0'
        compile 'com.google.inject:guice:3.0'
        compile 'com.typesafe:config:1.2.1'
        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-core:1.9.5'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                artifactId = "rocket-${project.name}"
            }
        }

        repositories {
            maven {
                url rocketUrl
                credentials {
                    username rocketUsername
                    password rocketPassword
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

task javadocAll(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}
